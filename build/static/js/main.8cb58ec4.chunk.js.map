{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","notExist","id","impotant","then","response","data","concat","newObject","post","put","Notification","massage","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errMassage","setErrMassage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAeeA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCR1CK,EAAU,aAoBD,EAlBA,WACX,IAAMC,EAAUC,IAAMC,IAAIH,GACpBI,EAAW,CACbC,GAAI,IACJP,QAAS,8BACTQ,UAAU,GAEd,OAAOL,EAAQM,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,OAAON,OAW1C,EARA,SAAAO,GACX,OAAOT,IAAMU,KAAKZ,EAASW,IAOhB,EAJA,SAACN,EAAIM,GAChB,OAAOT,IAAMW,IAAN,UAAab,EAAb,YAAwBK,GAAMM,ICJ1BG,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKlB,UAAU,QAAf,SACKkB,KCOEC,G,MAfA,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,SACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,4GCyFGC,EA3FH,WAEV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAoCN,mBAAS,MAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAEAC,qBAAU,WAERC,IAEGzB,MAAK,SAAA0B,GACJT,EAASS,QAEZ,IAGH,IA2CMC,EAAcP,EAChBJ,EACAA,EAAMY,QAAO,SAAA1C,GAAI,OAAuB,IAAnBA,EAAKG,aAE9B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcmB,QAASc,IACvB,yBAAQ9B,QAAS,kBAAM6B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,SAEhC,6BACGO,EAAYE,KAAI,SAAA3C,GAAI,OACnB,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAnCD,SAACW,GAC1B,IAAMZ,EAAO8B,EAAMc,MAAK,SAAA5C,GAAI,OAAIY,IAAOZ,EAAKY,MACtCiC,EAAW,2BAAQ7C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDoC,EAAmB3B,EAAIiC,GACpB/B,MAAK,SAAAC,GACJgB,EAASD,EAAMa,KAAI,SAAA3C,GAAI,OAAIA,EAAKY,KAAOA,EAAKZ,EAAOe,EAASC,YAG7D8B,OAAM,SAAAC,GACLV,EAAc,SAAD,OAAUrC,EAAKK,QAAf,kCACb2C,YAAW,kBAAMX,EAAc,QAC7B,KAGFN,EAASD,EAAMY,QAAO,SAAA1C,GAAI,OAAIA,EAAKY,KAAOA,SAoBdqC,CAAmBjD,EAAKY,MAF3CZ,EAAKY,SAKhB,uBAAMsC,SA9DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBhD,QAAS2B,EACTsB,MAAM,IAAIC,MAAOC,YACjBrD,UAAWsD,KAAKC,SAAW,IAG7BnB,EACUc,GACPvC,MAAK,SAAAC,GACJgB,EAASD,EAAMb,OAAOF,EAASC,OAC/BiB,EAAW,QAkDb,UACE,uBAAO0B,MAAO3B,EACZ4B,SA7CiB,SAACT,GACxBU,QAAQC,IAAIX,EAAMY,OAAOJ,OACzB1B,EAAWkB,EAAMY,OAAOJ,UA4CpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,QCvFNC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.8cb58ec4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport default Note             ","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const notExist = {\r\n        id: 123,\r\n        content: 'this is not saved to server',\r\n        impotant: false\r\n    }\r\n    return request.then(response => response.data.concat(notExist))\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default { getAll, create, update }","\r\n\r\nconst Notification = ({ massage }) => {\r\n    if (massage === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {massage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'silver',\r\n        fontStyle: 'italic',\r\n        fontSize: 15\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app, DEpartment of Computer Science, University of Helsinki 2022</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","\nimport Note from './components/Note';\nimport React, { useState, useEffect } from 'react';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\nimport './index.css'\nimport Footer from './components/Footer';\n\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errMassage, setErrMassage] = useState(null)\n\n  useEffect(() => {\n\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString,\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .create(noteObject)\n      .then(response => {\n        setNotes(notes.concat(response.data))\n        setNewNote('')\n      })\n\n\n\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(note => id === note.id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService.update(id, changedNote)\n      .then(response => {\n        setNotes(notes.map(note => note.id !== id ? note : response.data))\n\n      })\n      .catch(error => {\n        setErrMassage(`Note '${note.content}' already deleted from server`)\n        setTimeout(() => setErrMassage(null),\n          10000\n        )\n\n        setNotes(notes.filter(note => note.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification massage={errMassage} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}\n          onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\n\n\nexport default App","\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport axios from 'axios';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n\n\n\n\n"],"sourceRoot":""}